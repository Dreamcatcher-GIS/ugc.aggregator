# coding=utf8
import multiprocessing
import time

from shapely.geometry import Polygon
from shapely.geometry import Point


def frange2(x, y, step):
    while x < y:
        yield x
        x += step
        if x >= y:
            x = y
            yield x


polygon_nanhai = Polygon(((112.933219, 23.165708), (112.919577, 23.152985), (112.905961, 23.154411),
                          (112.896812, 23.145264), (112.910786, 23.124896), (112.908822, 23.120948),
                          (112.889205, 23.122712), (112.882597, 23.120097), (112.884306, 23.110086),
                          (112.871487, 23.099383), (112.878667, 23.081595), (112.873702, 23.068562),
                          (112.880064, 23.060906), (112.881678, 23.053336), (112.878302, 23.044991),
                          (112.885673, 23.034574), (112.885582, 23.023236), (112.893733, 23.022816),
                          (112.891657, 23.012495), (112.898392, 23.00285), (112.90951, 22.997642),
                          (112.912052, 22.988642), (112.904859, 22.972978), (112.886592, 22.962525),
                          (112.876261, 22.960527), (112.876484, 22.945366), (112.883732, 22.928863),
                          (112.915914, 22.897843), (112.928836, 22.863616), (112.920836, 22.862524),
                          (112.903786, 22.882665), (112.88648, 22.885751), (112.876749, 22.891638),
                          (112.869858, 22.887901), (112.866472, 22.875809), (112.853808, 22.859179),
                          (112.866409, 22.839832), (112.880532, 22.848367), (112.903151, 22.843099),
                          (112.932605, 22.859139), (112.962657, 22.837895), (112.988375, 22.80882),
                          (113.031996, 22.8086), (113.048104, 22.814735), (113.067535, 22.80564),
                          (113.072365, 22.822902), (113.057358, 22.832288), (113.054174, 22.839331),
                          (113.031448, 22.849861), (113.030147, 22.856323), (113.022803, 22.860262),
                          (113.022909, 22.886587), (113.016506, 22.88971), (113.006943, 22.906433),
                          (113.006794, 22.915315), (113.015651, 22.918945), (113.024076, 22.931295),
                          (112.998802, 22.975861), (112.984943, 22.985414), (112.995053, 23.010509),
                          (112.993372, 23.032805), (113.000781, 23.03095), (113.018539, 23.038066),
                          (113.032598, 23.034638), (113.041859, 23.041314), (113.05152, 23.039018),
                          (113.059211, 23.046773), (113.060483, 23.057287), (113.086488, 23.054488),
                          (113.092438, 23.061553), (113.101429, 23.056433), (113.100597, 23.060856),
                          (113.108321, 23.060714), (113.111653, 23.067716), (113.119836, 23.065931),
                          (113.123088, 23.072116), (113.126483, 23.069516), (113.127204, 23.058585),
                          (113.131294, 23.053975), (113.136008, 23.054017), (113.136597, 23.050378),
                          (113.141838, 23.050002), (113.140381, 23.041443), (113.146804, 23.03054),
                          (113.155024, 23.025958), (113.161901, 23.030352), (113.166466, 23.02512),
                          (113.157848, 23.02371), (113.158098, 23.018758), (113.147693, 23.011968),
                          (113.15174, 23.011629), (113.157654, 23.001332), (113.162535, 23.006194),
                          (113.175663, 23.002471), (113.179162, 22.996515), (113.184734, 22.996598),
                          (113.196425, 23.003259), (113.199691, 23.011079), (113.20872, 23.013985),
                          (113.221288, 23.012772), (113.22892, 23.008952), (113.2277, 23.002042),
                          (113.236548, 22.98559), (113.246931, 22.983234), (113.255699, 22.984463),
                          (113.258223, 22.996764), (113.263882, 23.002268), (113.255385, 23.006369),
                          (113.254572, 23.013874), (113.260632, 23.018417), (113.256155, 23.024207),
                          (113.26268, 23.027485), (113.257228, 23.037091), (113.262387, 23.041098),
                          (113.261717, 23.051572), (113.234405, 23.047117), (113.21895, 23.048962),
                          (113.202619, 23.061869), (113.190823, 23.066253), (113.184266, 23.074416),
                          (113.183928, 23.083598), (113.200912, 23.090045), (113.215825, 23.088808),
                          (113.223618, 23.104745), (113.213688, 23.105563), (113.213715, 23.113608),
                          (113.20888, 23.11451), (113.211529, 23.127216), (113.217775, 23.127859),
                          (113.219962, 23.147126), (113.204745, 23.15395), (113.194923, 23.151813),
                          (113.198923, 23.154283), (113.194814, 23.16595), (113.216108, 23.181504),
                          (113.21706, 23.192743), (113.210086, 23.209548), (113.194708, 23.22153),
                          (113.188526, 23.220933), (113.181741, 23.22995), (113.185544, 23.233332),
                          (113.18197, 23.242411), (113.188385, 23.247889), (113.191244, 23.265409),
                          (113.185542, 23.276438), (113.177238, 23.284273), (113.171245, 23.284686),
                          (113.170183, 23.291579), (113.158278, 23.292349), (113.155263, 23.296957),
                          (113.159117, 23.307786), (113.153606, 23.30598), (113.142027, 23.309367),
                          (113.133601, 23.315894), (113.125903, 23.310283), (113.115578, 23.310236),
                          (113.113445, 23.296998), (113.078852, 23.287529), (113.087425, 23.262209),
                          (113.08502, 23.255753), (113.072805, 23.254945), (113.065205, 23.26215),
                          (113.056841, 23.261891), (113.053183, 23.256751), (113.053353, 23.247443),
                          (113.064059, 23.235721), (113.052218, 23.229213), (113.036463, 23.232174),
                          (113.039333, 23.222402), (113.036997, 23.215701), (113.019119, 23.22424),
                          (112.996826, 23.220093), (112.983772, 23.22221), (112.97793, 23.23663),
                          (112.952686, 23.227421), (112.957813, 23.210427), (112.934569, 23.184939),
                          (112.93621, 23.168606), (112.933219, 23.165708)))
from util.io.FileUtil import FileUtil
import logging
import logging.config
logging.config.fileConfig(FileUtil().getLogConfigPath())
logger = logging.getLogger("ugc")
from util.geo.GeoUtil import GeoUtil


import gevent
import gevent.monkey
gevent.monkey.patch_thread()
gevent.monkey.patch_socket()

def getPointByBoundsWithFilterHandler(self, index, polygon, step, bounds):
# 获取区域内点集合（拓扑过滤）
    from util.common.CollectionUtil import CollectionUtil

    # TODO 为什么不是异步的,待解决性能问题！
    logger.info('current index %s' % index)
    x1 = bounds[0]
    y1 = bounds[1]
    x2 = bounds[2]
    y2 = bounds[3]
    # points = []
    # print x1, y1, x2, y2
    # print (y2 - y1) / float(step)
    # print (x2 - x1) / float(step)
    for startY in frange2(y1, y2, step):
        for startX in frange2(x1, x2, step):
            point = str(startY) + ',' + str(startX)
            point_wkt = Point(startX, startY)
            isIntersects = GeoUtil().isIntersectsPolygon(polygon, point_wkt)
            if isIntersects:
                self.pointList.append(point)

    logger.debug('Process %s done , point size : %s' % (index, len(self.pointList)))
    # if len(points) > 0:
    #     self.pointsList.append(points)


def worker(msg):
    print "msg:", msg
    time.sleep(3)
    print "end"
    return "done " + msg


class MultiProcessingTest(object):
    def __init__(self):
        print "Constructor "
        self.pointList = []

    def process(self):
        try:
            pool = multiprocessing.Pool(processes=4)
            result = []
            for i in xrange(3):
                msg = "hello %d" % (i)
                result.append(pool.apply_async(worker, (msg,)))
            pool.close()
            pool.join()
            for res in result:
                print ":::", res.get()
            print "Sub-process(es) done."
        except:
            pass


if __name__ == "__main__":
    service = MultiProcessingTest()
    service.process()
